" Notes:  {
"		- For vundle: git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
"   - For windows: (as admin) mklink /H _vimrc .vim\dotvimrc
"     (or maybe the other way around - .vim\dotvimrc _vimrc)

" }

" Windows Compatibility {

	" On Windows, also use '.vim' instead of 'vimfiles'; this makes
	" synchronization across (heterogeneous) systems easier.
	if has('win32') || has('win64')
		set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
	endif
" }
" Vundle {
	" Setup system for vundle {
		set nocompatible   " Disable vi-compatibility
		filetype off       " required for vundle

		set rtp+=~/.vim/bundle/Vundle.vim
	" }

	" Add an UnBundle command {
		function! UnBundle(arg, ...)
			let bundle = vundle#config#init_bundle(a:arg, a:000)
			call filter(g:bundles, 'v:val["name_spec"] != "' . a:arg . '"')
		endfunction

		com! -nargs=+         UnBundle
		\ call UnBundle(<args>)
	" }
	" Bundles {
   call vundle#begin()

		" Deps {
		  Plugin 'gmarik/vundle'
			Plugin 'MarcWeber/vim-addon-mw-utils'
			Plugin 'tomtom/tlib_vim'
			Plugin 'Shougo/vimproc'
			if executable('ag')
				Plugin 'mileszs/ack.vim'
				let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
			elseif executable('ack-grep')
				let g:ackprg = 'ack-grep -H --nocolor --nogroup --column'
				Plugin 'mileszs/ack.vim'
			elseif executable('ack')
				Plugin 'mileszs/ack.vim'
			endif

		" }
   " Bundles {
			Plugin 'rking/ag.vim'
			Plugin 'kien/ctrlp.vim'
			Plugin 'mattn/emmet-vim'
			Plugin 'sjl/gundo.vim'
			Plugin 'othree/javascript-libraries-syntax.vim'
			Plugin 'Lokaltog/vim-easymotion'
			Plugin 'scrooloose/nerdtree'
			Plugin 'tomtom/tcomment_vim'
			Plugin 'SirVer/ultisnips'
			Plugin 'bling/vim-airline'
			Plugin 'altercation/vim-colors-solarized'
			Plugin 'pangloss/vim-javascript'
			Plugin 'nathanaelkane/vim-indent-guides'
			Plugin 'jelera/vim-javascript-syntax'
			Plugin 'tpope/vim-surround'
			Plugin 'Shougo/neocomplete.vim'
			Plugin 'Raimondi/delimitMate'
			Plugin 'scrooloose/syntastic'
			Plugin 'Shougo/vimshell.vim'
			" Plugin ''

		" }

		call vundle#end()

		filetype plugin indent on
  " }
" }
" General settings {
	" Old pathogen stuff {

		" runtime! autoload/pathogen.vim
		" silent! call pathogen\#helptags()
		" silent! call pathogen#infect() " use pathogen
		" silent! call pathogen\#runtime_append_all_bundles()

	" }
	" Appearance {
		syntax enable
		set hidden " allow me to silently change buffers when there are unsaved changes

		" Color stuff
		set background=dark
		colorscheme solarized


		" set my font up
		if has("gui_running")
			if has("gui_gtk2")
				set guifont=Inconsolata\ 12
			elseif has("gui_macvim")
				set guifont=Menlo\ Regular:h14
			elseif has("gui_win32")
				set guifont=PragmataPro:h11
			endif
		endif

	" }
	" Misc {

		let mapleader=","	" leader is comma
		nnoremap \ ,

		" call pathogen#runtime_append_all_bundles() " really, use pathogen
		set laststatus=2   " Always show the statusline
		set encoding=utf-8 " Necessary to show Unicode glyphs
		set t_Co=256 " Explicitly tell Vim that the terminal supports 256 colors
		" Use ~x on an English Windows version or ~n for French.
		" Start vim at maximum window size
		au GUIEnter * simalt ~x
		set backspace=indent,eol,start " backspace through anything!

		" No beeping or flashing, please
		set noerrorbells visualbell t_vb=
		autocmd GUIEnter * set visualbell t_vb=

		set shortmess=atI

		if !exists('g:airline_symbols')
			let g:airline_symbols = {}
		endif

		let g:airline_left_sep = '▒'
		let g:airline_right_sep = '▒'
		let g:airline#extensions#tabline#enabled = 1

		let g:airline#extensions#tabline#left_sep = '▒'
		let g:airline#extensions#tabline#left_alt_sep = '▒'
		let g:airline#extensions#tabline#right_sep = '▒'
		let g:airline#extensions#tabline#right_alt_sep = '▒'

		" reduce the listening time for things to something more sensible
		set ttimeout
		set ttimeoutlen=400
		set gdefault

		set autoread " when a file changes, reload it in buffer automagically

		set omnifunc=syntaxcomplete#Complete

		" Modeline! {

			" Enables modeline for overriding standard settings per file.
			" This is mostly for this file.
			set modeline
			set modelines=1

		" }
		" You WILL learn! {

			" disable arrow keys. NO CRUTCHES!!
			map <up> <nop>
			map <down> <nop>
			map <left> <nop>
			map <right> <nop>

			inoremap <up> <nop>
			inoremap <down> <nop>
			inoremap <left> <nop>
			inoremap <right> <nop>
		" }
	" }
	" Spaces & Tabs {
		set noexpandtab " tabs are not spaces
		set shiftwidth=2 " number of
		set tabstop=2  " number of visual spaces per TAB
		set softtabstop=2 " number of spaces in tab when editing
		set autoindent
		set copyindent

		" Use the same symbols as TextMate for tabstops and EOLs
		set listchars=tab:☠\ ,eol:¬

		" reselects visual block when indenting/unindenting
		vnoremap < <gv
		vnoremap > >gv

	" }
	" Folding {
		set foldenable " enable folding
		set foldlevelstart=10 " open most folds by default
		set foldnestmax=10 " 10 nested fold max

		" space toggles folds
		nnoremap <space> za
		" closes all folds
		nnoremap <leader><leader><space> zM
		" opens all folds
		nnoremap <leader><leader>' zR

		set foldmethod=indent "fold based on indent level

	" }
	" UI Things {
		set number " show line numbers

		set scrolloff=3 " keep 3 lines on either side of the cursor when scrolling

		" Make vim update the title of terminal window with current buffer's file name
		set title

		set showcmd  " show command in bottom bar

		set cursorline " highlight current line

		set wildmenu " visual autocomplete for command menu

		set lazyredraw " redraw only when we need to

		set showmatch " highlight matching [{()}]

		" switch cursor when moving in and out of insert mode
		let &t_SI = "\<Esc>]50;CursorShape=1\x7"
		let &t_EI = "\<Esc>]50;CursorShape=0\x7"

	" }
	" Search {

		set incsearch " search as characters are entered
		set ignorecase " ignore case when searching
		set smartcase " ...unless I include capitals
		set hlsearch " highlight matches

		" turn off search highlight
		nnoremap <leader><space> :nohlsearch<CR>

		" lists lines containing the word under the cursor
		" type the line number followed by <CR> to jump
		" to the corresponding line
		nnoremap [I [I:
		xnoremap [I "vy:<C-u>ilist /<C-r>v<CR>:

		" populates the command-line with this stub
		nnoremap <leader>I :ilist /
	" }
	" Tmux {

		" allows cursor change in tmux mode
		if exists('$TMUX')
			let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
			let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
		else
			let &t_SI = "\<Esc>]50;CursorShape=1\x7"
			let &t_EI = "\<Esc>]50;CursorShape=0\x7"
		endif
	" }
	" Backups {

		" Aren't both these things what git is for?
		set nobackup
		set noswapfile
	" }
" }
" Bindings and Shortcuts {
	" Misc Binds {

		" move vertically by visual line
		nnoremap j gj
		nnoremap k gk

		" shift + ctrl + J = split line
		" nnoremap <leader>j i<CR><esc>

		" C-j and C-k scroll up and down respectively
		" nnoremap <C-j> 10j
		" nnoremap <C-k> 10k

		" move to the beginning/end of line
		nnoremap B ^
		nnoremap E $

		" also replace B and E as motions in commands ( e.g. dE -> d$ )
		onoremap B ^
		onoremap E $

		" Make Y behave like other capitals
		nnoremap Y y$

		"$/^ doesn't do anything
		nnoremap $ <nop>
		nnoremap ^ <nop>
		onoremap $ <nop>
		onoremap ^ <nop>

		" highlight last inserted text
		nnoremap gV `[v`]

		" inoremap jk <esc>
		" ^ above disabled because I rebound Caps Lock to escape using AutoHotkey

		" save with ctrl + s
		nnoremap <C-s> :w<CR>h

		" CTRL+space now opens completion options
		inoremap <C-space> <C-x><C-o>

		" <C-c> enters an empty line
		inoremap <C-c> <CR><Esc>O

		" swap ` and ', because I rarely want to go to just the line of a mark
		" and also backtick is annoying to get to for my tiny fingers
		nnoremap ' `
		nnoremap ` '
	" }
	" Leader Shortcuts {
		nnoremap <leader>u :GundoToggle<CR>

		" Edit mah vimrc!
		nnoremap <leader>v :vsplit $MYVIMRC<CR>

		" insert blank lines
		nnoremap <leader>o o<esc>"_Dk
		nnoremap <leader>O O<esc>"_Dj

		nnoremap <leader>q :q<cr>

		" save session
		nnoremap <leader>s :mksession<CR>

		" toggles display of hidden characters such as tabs and line ends
		" nnoremap <leader>l :set list!<CR>

		" window movement
		nnoremap <C-J> <C-W><Down>
		nnoremap <C-K> <C-W><Up>
		nnoremap <C-H> <C-W><Left>
		nnoremap <C-L> <C-W><Right>

		nnoremap <leader>t :tabnext<CR>
		nnoremap <leader>T :tabprev<CR>


		" open ag.vim
		" nnoremap <leader>a :Ag

		nnoremap <leader>r :set relativenumber!<cr>

		" NERDtree toggle
		nnoremap <leader>nt :NERDTreeToggle<CR>

		" quickly change to next window
		nnoremap <leader>w <C-w><C-w>

		" quickly change to next buffer
		nnoremap <leader>b :bn<CR>
		nnoremap <leader>B :bp<CR>
		nnoremap <leader>db :bp<CR>:bd #<CR>

		" easily access system clipboard buffer
		vnoremap <Leader>y "+y
		vnoremap <Leader>d "+d
		nnoremap <Leader>yy "+yy
		nnoremap <Leader>dd "+dd
		nnoremap <Leader>p "+p
		nnoremap <Leader>P "+P
		vnoremap <Leader>p "+p
		vnoremap <Leader>P "+P

		" move lines up and down
		" nnoremap <leader>lj :m .+1<CR>==
		" nnoremap <leader>lk :m .-2<CR>==
		inoremap <leader>lj <Esc>:m .+1<CR>==gi
		inoremap <leader>lk <Esc>:m .-2<CR>==gi
		vnoremap <leader>lj :m '>+1<CR>gv=gv
		vnoremap <leader>lk :m '<-2<CR>gv=gv''

		" Remove White Space
		nnoremap <Leader>rws :%s:\s\+$::<CR>:let @/=''<cr>

		" VimShell
		nnoremap <leader>sh :VimShell<cr>
	" }
" }
" Plugin Configs {
	" CtrlP {
		let g:ctrlp_working_path_mode = 'ra'
		let g:ctrlp_match_window = 'bottom,order:btt'
		let g:ctrlp_switch_buffer = 'e'
		" let g:ctrlp_working_path_mode = 0

		set wildignore+=*\\QuorumCES\\build\\*

		let g:ctrlp_custom_ignore = {
		\ 'dir':  '\v[\\]\.(git|hg|svn|build)$',
		\ 'file': '\v\.(exe|so|dll)$',
		\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
		\ }
	" }
	" TComment {
		" toggle comment
		nnoremap <leader>c :TComment<CR>
		vnoremap <leader>c :TComment<CR>
	" }
	" syntactical sugar {
		let g:used_javascript_libs = 'angularjs,jasmine'

	" }
	" Syntastic {

		let g:syntastic_check_on_open = 1


	" }
	" NeoComplete {
		let g:acp_enableAtStartup = 0
		let g:neocomplete#enable_at_startup = 1
		let g:neocomplete#enable_smart_case = 1
		let g:neocomplete#sources#syntax#min_keyword_length = 3

		" Recommended key-mappings.
		" <CR>: close popup and save indent.
		inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
		function! s:my_cr_function()
		  " return neocomplete#close_popup() . "\<CR>"
			" For no inserting <CR> key.
			return pumvisible() ? neocomplete#close_popup() : "\<CR>"
		endfunction
		" <TAB>: completion.
		inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
		" <C-h>, <BS>: close popup and delete backword char.
		inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
		inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
		inoremap <expr><C-y>  neocomplete#close_popup()
		inoremap <expr><C-e>  neocomplete#cancel_popup()

		" Enable omni completion.
		autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
		autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
		autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
		autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
		autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

		" Enable heavy omni completion.
		if !exists('g:neocomplete#sources#omni#input_patterns')
			let g:neocomplete#sources#omni#input_patterns = {}
		endif
	" }
" }
" AutoCmd stuff {

		" Source the vimrc file after saving it
		if has("autocmd")
			augroup vimrc " {
				au!
				autocmd bufwritepost .vimrc source $MYVIMRC | AirlineRefresh
				autocmd bufwritepost _vimrc source $MYVIMRC | AirlineRefresh
				" autocmd bufwritepost .vimrc normal :e!
				" autocmd bufwritepost _vimrc normal :e!
				autocmd FileType vim
					\ setlocal foldmethod=marker |
					\ setlocal foldmarker={,} |
					\ setlocal foldlevel=0 |
					\ setlocal foldlevelstart=0 |
					\ setlocal nowrap
			augroup END " }

			augroup syntaxThings " {
				au!
				" make json files use javascript highlighting
				autocmd BufNewFile,BufRead *.json set ft=javascript

				" let's pretend .jsp files are html.
				autocmd BufNewFile,BufRead *.jsp set ft=html
			augroup END " }

			" auto remove whitespace on buffer save
			autocmd! BufWrite * mark ' | silent! %s/\s\+$// | norm ''

			augroup speelnig " {
				au!
				" Turn on spell check for certain filetypes automatically
				autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us
				" autocmd BufRead,BufNewFile *.txt setlocal spell spelllang=en_us
				autocmd FileType gitcommit setlocal spell spelllang=en_us
			augroup END " }
		endif





" }
" Custom Functions {

	" strips trailing whitespace at the end of files.
	" this is called on buffer write in the autogroup above.
	function! <SID>StripTrailingWhitespaces() " {
		" save last search & cursor position
		let _s=@/
		let l = line(".")
		let c = col(".")
		%s/\s\+$//e
		let @/=_s
		call cursor(l, c)
	endfunction  " }

	"http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
	function! PopupMenuLikeIDE() " {
			if exists('+insert_expand')
					set completeopt=longest,menuone
					inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>
					inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
											\ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
					inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
											\ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
			endif
	endfunction
	call PopupMenuLikeIDE()
	" }

	" make j and k movement keys in the omnipopup
	function! OmniPopup(action) " {
		if pumvisible()
			if a:action == 'j'
				return "\<C-N>"
			elseif a:action == 'k'
				return "\<C-P>"
			elseif a:action == 'tab'
				return "\<C-N>"
			endif
		elseif a:action == 'tab'
			return "\<tab>"
		endif
		return a:action
	endfunction
	inoremap <silent><leader><tab> <C-R>=OmniPopup('tab')<CR>
	inoremap <silent>jj <C-R>=OmniPopup('j')<CR>
	inoremap <silent>kk <C-R>=OmniPopup('k')<CR>
	" }

	" :Reg shows the list of recent registers. Entering the register name
	"			 will paste that register's contents
	function! Reg() " {
			reg
			echo "Register:"
			let char = getchar()
			execute "normal! \"".nr2char(char)."p"
			redraw
			normal! k
	endfunction
	command! -nargs=0 Reg call Reg() | normal <cr>
	" }

	" extract variable selected via visual mode
	function! ExtractLocalVariable() " {
			let name = input("Variable name: ")

			if (visualmode() == "")
					normal! viw
			else
					normal! gv
			endif

			exec "normal! c" . name
			exec "normal! Ovar " . name . " =
			exec "normal! pa;
	endfunction
	vnoremap <Leader>var :call ExtractLocalVariable()<CR>
	" }


	" Session Management  {
	function! SaveSession()
			if winnr('$') > 1 || tabpagenr('$') > 1
					" we have more than one windows or tabs open, ask whether we want
					" to save the session.
					let save_sesssion = confirm("Save session ? ", "&yes\n&no", 1)
					if save_sesssion == 1
							call inputsave()
							let session_fl = input("save as: ", getcwd()."/.session.vim", "file")
							call inputrestore()
							execute 'mksession!' session_fl
					endif
			endif
	endfunction

	function! LoadSession()
			if argc() != 0
					return
			endif
			let session_fl = getcwd()."/.session.vim
			if filereadable(session_fl)
					let load_sesssion = confirm("Load session from '".session_fl."'?", "&yes\n&no\nload and delete\ndelete", 1)
					if load_sesssion == 1 || load_sesssion == 3
							execute 'source' session_fl
					endif
					if load_sesssion == 3 || load_sesssion == 4
							call system('unlink '.session_fl)
					endif
			endif
	endfunction

	" au VimLeavePre * call SaveSession()
	" au VimEnter * call LoadSession()
	" }

	" function says it all. Happens on buffer load
	function! s:JumpToLastKnownCursorPosition() " {
			if line("'\"") <= 1 | return | endif
			if line("'\"") > line("$") | return | endif
			" Ignore git commit messages and git rebase scripts
			if expand("%") =~# '\(^\|/\)\.git/' | return | endif
			execute "normal! g`\"" |
	endfunction
	augroup latcursor
		au!
		autocmd BufReadPost * call s:JumpToLastKnownCursorPosition()
	augroup END
	" }

	" Searches the character passed from the starting column on a visual block and aligns the lines to it. {
	function! MaxColumn(string, startline, endline, column)
			let l:cursor_save = getpos('.')
			let l:max_column = 0
			for line in range(a:endline - a:startline + 1)
					call cursor(a:startline + line, a:column)
					call search(a:string, 'c', line('.'))
					let l:current_column = col('.')
					if l:current_column > l:max_column
							let l:max_column = l:current_column
					endif
			endfor
			call setpos('.', l:cursor_save)
			return l:max_column
	endfunction

	function! Align(string) range
			let col = min([ virtcol("'<"), virtcol("'>") ])
			let l:cursor_save = getpos('.')
			let l:max_column = MaxColumn(a:string, a:firstline, a:lastline, col)
			for line in range(a:lastline - a:firstline + 1)
					call cursor(a:firstline + line, col)
					if search(a:string, 'c', line('.')) != 0
							let delta_col = (l:max_column - col('.'))
							if delta_col > 0
									exe "normal ".delta_col."i "
							endif
					endif
			endfor
			call setpos('.', l:cursor_save)
	endfunction
	command! -nargs=1 -range Align '<,'>call Align(<f-args>)
	vnoremap <leader>: :Align :<CR>
	vnoremap <leader>= :Align =<CR>
	" }

	" :CMD copies the last command to system clipboard {
		command! CMD let @+ = ':' . @:
	" }
" }
